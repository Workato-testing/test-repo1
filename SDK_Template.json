{
    title: "SampleApp",
  
    # API key authentication example. See more examples at https://docs.workato.com/developing-connectors/sdk/guides/authentication.html
    connection: {
      fields: [
        {
          name: "api_key",
          hint: "You can find your API key " \
            "<a href='https://sampleApp.com/integrations' " \
            "target='_blank'>here</a>"
        }
      ],
  
      authorization: {
        type: "custom_auth",
  
        # SampleApp uses header auth (X-Token: <api key>)
        apply: lambda do |connection|
          headers("X-Token": connection["api_key"])
        end
      },
  
      base_uri: lambda do
        "https://sampleApp.com"
      end
    },
  
    #   Alternative sample OAuth2 authentication. See more examples at https://docs.workato.com/developing-connectors/sdk/guides/authentication.html
    #   connection: {
    #     fields: [
    #       {
    #         name: 'client_id',
    #         optional: false
    #       },
    #       {
    #         name: 'client_secret',
    #         optional: false,
    #         control_type: 'password'
    #       }
    #     ],
  
    #     authorization: {
    #       type: 'oauth2',
  
    #       authorization_url: lambda do
    #         'https://app.asana.com/-/oauth_authorize'
    #       end,
  
    #       token_url: lambda do
    #         'https://app.asana.com/-/oauth_token'
    #       end,
  
    #       client_id: lambda do |connection|
    #         connection['client_id']
    #       end,
  
    #       client_secret: lambda do |connection|
    #         connection['client_secret']
    #       end,
  
    #       apply: lambda do |connection, access_token|
    #         headers('Authorization': "Bearer #{access_token}")
    #       end
    #     }
    #   },
  
    #   Alternative sample Basic authentication. See more examples at https://docs.workato.com/developing-connectors/sdk/guides/authentication.html
    #   connection: {
    #     fields: [
    #       {
    #         name: 'helpdesk',
    #         control_type: 'subdomain',
    #         url: '.freshdesk.com',
    #         hint: 'Your helpdesk name as found in your Freshdesk URL'
    #       },
    #       {
    #         name: 'username',
    #         optional: true,
    #         hint: 'Your username; leave empty if using API key below'
    #       },
    #       {
    #         name: 'password',
    #         control_type: 'password',
    #         label: 'Password or personal API key'
    #       }
    #     ],
  
    #     authorization: {
    #       type: 'basic_auth',
  
    #       # Basic auth credentials are just the username and password; framework handles adding
    #       # them to the HTTP requests.
    #       apply: lambda do |connection|
    #         # Freshdesk-specific quirk: If only using API key to authenticate, API expects it as username,
    #         # but we prefer to store it in 'password' to keep it obscured (control_type: 'password' above).
    #         if connection['username'].blank?
    #           user(connection['password'])
    #         else
    #           user(connection['username'])
    #           password(connection['password'])
    #         end
    #       end
    #     }
    #   },
  
    test: lambda do |_connection|
      get("/api/v1/echo")
    end,
  
    object_definitions: {
      #  Object definitions can be referenced by any input or output fields in actions/triggers.
      #  Use it to keep your code DRY. Possible arguments - connection, config_fields
      #  See more at https://docs.workato.com/developing-connectors/sdk/sdk-reference/object_definitions.html
      user: {
        fields: lambda do |_connection, _config_fields|
          [
            { name: "id" },
            {
              name: "attributes",
              type: "object",
              properties: [
                { name: "name" },
                { name: "slug" },
                { name: "email", control_type: "email" },
                { name: "url", control_type: "url" },
                {
                  name: "avatar",
                  type: "object",
                  properties: [
                    { name: "url", control_type: "url" }
                  ]
                },
                { name: "created_at", type: "date_time" },
                { name: "updated_at", type: "date_time" }
              ]
            }
          ]
        end
      },
  
      event: {
        fields: lambda do
          [
            { name: "event" },
            { name: "time", type: "date_time" },
            {
              name: "payload",
              type: "object",
              properties: [
                {
                  name: "event_type", type: "object", properties: [
                    { name: "kind" },
                    { name: "slug" },
                    { name: "name" },
                    { name: "duration", type: "integer" }
                  ]
                },
                {
                  name: "event", type: "object", properties: [
                    { name: "uuid" },
                    { name: "assigned_to", type: "array" },
                    {
                      name: "extended_assigned_to", type: "array", properties: [
                        { name: "name" },
                        { name: "email" },
                        { name: "primary", type: "boolean" }
                      ]
                    },
                    { name: "start_time", type: "date_time" },
                    { name: "start_time_pretty" },
                    { name: "invitee_start_time", type: "date_time" },
                    { name: "invitee_start_time_pretty" },
                    { name: "end_time", type: "date_time" },
                    { name: "end_time_pretty" },
                    { name: "invitee_end_time", type: "date_time" },
                    { name: "invitee_end_time_pretty" },
                    { name: "created_at", type: "date_time" },
                    { name: "location" },
                    { name: "canceled", type: "boolean" },
                    { name: "canceler_name" },
                    { name: "cancel_reason" },
                    { name: "canceled_at", type: "date_time" }
                  ]
                },
                {
                  name: "invitee", type: "object", properties: [
                    { name: "uuid" },
                    { name: "first_name" },
                    { name: "last_name" },
                    { name: "name" },
                    { name: "email", control_type: "email" },
                    { name: "timezone" },
                    { name: "created_at", type: "date_time" },
                    { name: "location" },
                    { name: "canceled", type: "boolean" },
                    { name: "canceler_name" },
                    { name: "cancel_reason" },
                    { name: "canceled_at", type: "date_time" }
                  ]
                },
                {
                  name: "questions_and_answers", type: "array", properties: [
                    { name: "question" },
                    { name: "answer" }
                  ]
                },
                {
                  name: "questions_and_responses", type: "object", properties: [
                    { name: "1_question" },
                    { name: "1_response" },
                    { name: "2_question" },
                    { name: "2_response" },
                    { name: "3_question" },
                    { name: "3_response" },
                    { name: "4_question" },
                    { name: "4_response" }
                  ]
                },
                {
                  name: "tracking", type: "object", properties: [
                    { name: "utm_campaign" },
                    { name: "utm_source" },
                    { name: "utm_medium" },
                    { name: "utm_content" },
                    { name: "utm_term" },
                    { name: "salesforce_uuid" }
                  ]
                }
              ]
            }
          ]
        end
      },
  
      event_types: {
        fields: lambda do
          [
            {
              name: "data",
              type: "array",
              of: "object",
              properties: [
                { name: "type" },
                { name: "id" },
                {
                  name: "attributes",
                  type: "object",
                  properties: [
                    { name: "name" },
                    { name: "description" },
                    { name: "duration", type: "number" },
                    { name: "slug" },
                    { name: "color" },
                    { name: "active", type: "boolean" },
                    { name: "created_at", type: "date_time" },
                    { name: "updated_at", type: "date_time" },
                    { name: "url", control_type: "url" }
                  ]
                },
                {
                  name: "relationships",
                  type: "object",
                  properties: [
                    {
                      name: "owner",
                      type: "object",
                      properties: [
                        {
                          name: "data",
                          type: "object",
                          properties: [
                            { name: "type" },
                            { name: "id" }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              name: "included",
              type: "array",
              of: "object",
              properties: [
                { name: "type" },
                { name: "id" },
                {
                  name: "attributes",
                  type: "object",
                  properties: [
                    { name: "slug" },
                    { name: "name" },
                    { name: "email" },
                    { name: "url" },
                    { name: "timezone" },
                    {
                      name: "avatar",
                      type: "object",
                      properties: [
                        { name: "url" }
                      ]
                    },
                    { name: "created_at", type: "date_time" },
                    { name: "updated_at", type: "date_time" }
                  ]
                }
              ]
            }
          ]
        end
      },
      
      custom_action_input: {
        fields: lambda do |_connection, config_fields|
          verb = config_fields['verb']
          input_schema = parse_json(config_fields.dig('input', 'schema') || '[]')
          data_props =
            input_schema.map do |field|
              if config_fields['request_type'] == 'multipart' &&
                 field['binary_content'] == 'true'
                field['type'] = 'object'
                field['properties'] = [
                  { name: 'file_content', optional: false },
                  {
                    name: 'content_type',
                    default: 'text/plain',
                    sticky: true
                  },
                  { name: 'original_filename', sticky: true }
                ]
              end
              field
            end
          data_props = call('make_schema_builder_fields_sticky', data_props)
          input_data =
            if input_schema.present?
              if input_schema.dig(0, 'type') == 'array' &&
                 input_schema.dig(0, 'details', 'fake_array')
                {
                  name: 'data',
                  type: 'array',
                  of: 'object',
                  properties: data_props.dig(0, 'properties')
                }
              else
                { name: 'data', type: 'object', properties: data_props }
              end
            end
  
          [
            {
              name: 'path',
              hint: 'Base URI is <b>' \
              'https://www.sampleapp.com' \
              '</b> - path will be appended to this URI. Use absolute URI to ' \
              'override this base URI.',
              optional: false
            },
            if %w[post put patch].include?(verb)
              {
                name: 'request_type',
                default: 'json',
                sticky: true,
                extends_schema: true,
                control_type: 'select',
                pick_list: [
                  ['JSON request body', 'json'],
                  ['URL encoded form', 'url_encoded_form'],
                  ['Mutipart form', 'multipart'],
                  ['Raw request body', 'raw']
                ]
              }
            end,
            {
              name: 'response_type',
              default: 'json',
              sticky: false,
              extends_schema: true,
              control_type: 'select',
              pick_list: [['JSON response', 'json'], ['Raw response', 'raw']]
            },
            if %w[get options delete].include?(verb)
              {
                name: 'input',
                label: 'Request URL parameters',
                sticky: true,
                add_field_label: 'Add URL parameter',
                control_type: 'form-schema-builder',
                type: 'object',
                properties: [
                  {
                    name: 'schema',
                    sticky: input_schema.blank?,
                    extends_schema: true
                  },
                  input_data
                ].compact
              }
            else
              {
                name: 'input',
                label: 'Request body parameters',
                sticky: true,
                type: 'object',
                properties:
                  if config_fields['request_type'] == 'raw'
                    [{
                      name: 'data',
                      sticky: true,
                      control_type: 'text-area',
                      type: 'string'
                    }]
                  else
                    [
                      {
                        name: 'schema',
                        sticky: input_schema.blank?,
                        extends_schema: true,
                        schema_neutral: true,
                        control_type: 'schema-designer',
                        sample_data_type: 'json_input',
                        custom_properties:
                          if config_fields['request_type'] == 'multipart'
                            [{
                              name: 'binary_content',
                              label: 'File attachment',
                              default: false,
                              optional: true,
                              sticky: true,
                              render_input: 'boolean_conversion',
                              parse_output: 'boolean_conversion',
                              control_type: 'checkbox',
                              type: 'boolean'
                            }]
                          end
                      },
                      input_data
                    ].compact
                  end
              }
            end,
            {
              name: 'request_headers',
              sticky: false,
              extends_schema: true,
              control_type: 'key_value',
              empty_list_title: 'Does this HTTP request require headers?',
              empty_list_text: 'Refer to the API documentation and add ' \
              'required headers to this HTTP request',
              item_label: 'Header',
              type: 'array',
              of: 'object',
              properties: [{ name: 'key' }, { name: 'value' }]
            },
            unless config_fields['response_type'] == 'raw'
              {
                name: 'output',
                label: 'Response body',
                sticky: true,
                extends_schema: true,
                schema_neutral: true,
                control_type: 'schema-designer',
                sample_data_type: 'json_input'
              }
            end,
            {
              name: 'response_headers',
              sticky: false,
              extends_schema: true,
              schema_neutral: true,
              control_type: 'schema-designer',
              sample_data_type: 'json_input'
            }
          ].compact
        end
      },
  
      custom_action_output: {
        fields: lambda do |_connection, config_fields|
          response_body = { name: 'body' }
  
          [
            if config_fields['response_type'] == 'raw'
              response_body
            elsif (output = config_fields['output'])
              output_schema = call('format_schema', parse_json(output))
              if output_schema.dig(0, 'type') == 'array' &&
                 output_schema.dig(0, 'details', 'fake_array')
                response_body[:type] = 'array'
                response_body[:properties] = output_schema.dig(0, 'properties')
              else
                response_body[:type] = 'object'
                response_body[:properties] = output_schema
              end
  
              response_body
            end,
            if (headers = config_fields['response_headers'])
              header_props = parse_json(headers)&.map do |field|
                if field[:name].present?
                  field[:name] = field[:name].gsub(/\W/, '_').downcase
                elsif field['name'].present?
                  field['name'] = field['name'].gsub(/\W/, '_').downcase
                end
                field
              end
  
              { name: 'headers', type: 'object', properties: header_props }
            end
          ].compact
        end
      }
    },
  
    actions: {
      get_event_types: {
        # Define the way people search for your actions and how it looks like on the recipe level
        # See more at https://docs.workato.com/developing-connectors/sdk/sdk-reference/actions.html
        title: "Get event types",
        subtitle: "Get possible event types in SampleApp",
        description: "Get <span class='provider'>event types</span> " \
          "in <span class='provider'>SampleApp</span>",
        help: "This action retrieve event types from SampleApp. Use this action" \
          " to search for custom event types in your SampleApp instance",
  
        # The input fields shown for this action. Shows when a user is defining the action.
        # Possible arguements in this specific order - object_definitions
        # See more at https://docs.workato.com/developing-connectors/sdk/sdk-reference/actions.html#input-fields
        input_fields: lambda do |object_definitions|
        end,
  
        # This code is run when a recipe uses this action.
        # Possible arguements in this specific order - connection, input, input_schema, output_schema
        # See more at https://docs.workato.com/developing-connectors/sdk/sdk-reference/actions.html#execute
        execute: lambda do |_connection, _input, _input_schema, _output_schema|
          get("/api/v1/users/me/event_types?include=owner")
        end,
  
        # The output values of the action. Shows in the output datatree of a recipe.
        # Possible arguements in this specific order - object_definitions
        # See more at https://docs.workato.com/developing-connectors/sdk/sdk-reference/actions.html#output-fields
        output_fields: lambda do |object_definitions|
          object_definitions["event_types"]
        end,
  
        # Provides you with a preview of possible output values in your datatree.
        # Possible arguements in this specific order - connection, input
        # See more at https://docs.workato.com/developing-connectors/sdk/sdk-reference/actions.html#sample-output
        sample_output: lambda do |_connection, _input|
          get("/api/v1/users/me/event_types?include=owner")
            .params(per_page: 1) || []
        end
      },
      custom_action: {
        subtitle: 'Build your own SampleApp action with a HTTP request',
  
        description: lambda do |object_value, _object_label|
          "<span class='provider'>" \
          "#{object_value[:action_name] || 'Custom action'}</span> in " \
          "<span class='provider'>SampleApp</span>"
        end,
  
        help: {
          body: 'Build your own SampleApp action with a HTTP request. ' \
          'The request will be authorized with your SampleApp connection.',
          learn_more_url: 'https://www.sampleApp.com/us/knowledge-base/software-integrations-via-api/',
          learn_more_text: 'SampleApp API documentation'
        },
  
        config_fields: [
          {
            name: 'action_name',
            hint: "Give this action you're building a descriptive name, e.g. " \
            'create record, get record',
            default: 'Custom action',
            optional: false,
            schema_neutral: true
          },
          {
            name: 'verb',
            label: 'Method',
            hint: 'Select HTTP method of the request',
            optional: false,
            control_type: 'select',
            pick_list: %w[get post put patch options delete]
              .map { |verb| [verb.upcase, verb] }
          }
        ],
  
        input_fields: lambda do |object_definition|
          object_definition['custom_action_input']
        end,
  
        execute: lambda do |_connection, input|
          verb = input['verb']
          if %w[get post put patch options delete].exclude?(verb)
            error("#{verb.upcase} not supported")
          end
          path = input['path']
          data = input.dig('input', 'data') || {}
          if input['request_type'] == 'multipart'
            data = data.each_with_object({}) do |(key, val), hash|
              hash[key] = if val.is_a?(Hash)
                            [val[:file_content],
                             val[:content_type],
                             val[:original_filename]]
                          else
                            val
                          end
            end
          end
          request_headers = input['request_headers']
            &.each_with_object({}) do |item, hash|
            hash[item['key']] = item['value']
          end || {}
          request = case verb
                    when 'get'
                      get(path, data)
                    when 'post'
                      if input['request_type'] == 'raw'
                        post(path).request_body(data)
                      else
                        post(path, data)
                      end
                    when 'put'
                      if input['request_type'] == 'raw'
                        put(path).request_body(data)
                      else
                        put(path, data)
                      end
                    when 'patch'
                      if input['request_type'] == 'raw'
                        patch(path).request_body(data)
                      else
                        patch(path, data)
                      end
                    when 'options'
                      options(path, data)
                    when 'delete'
                      delete(path, data)
                    end.headers(request_headers)
          request = case input['request_type']
                    when 'url_encoded_form'
                      request.request_format_www_form_urlencoded
                    when 'multipart'
                      request.request_format_multipart_form
                    else
                      request
                    end
          response =
            if input['response_type'] == 'raw'
              request.response_format_raw
            else
              request
            end
            .after_error_response(/.*/) do |code, body, headers, message|
              error({ code: code, message: message, body: body, headers: headers }
                .to_json)
            end
  
          response.after_response do |_code, res_body, res_headers|
            {
              body: res_body ? call('format_response', res_body) : nil,
              headers: res_headers
            }
          end
        end,
  
        output_fields: lambda do |object_definition|
          object_definition['custom_action_output']
        end
      }
    },
  
    triggers: {
      # Dynamic webhook example. Subscribes and unsubscribes webhooks programatically
      # see more at https://docs.workato.com/developing-connectors/sdk/guides/building-triggers/dynamic-webhook.html
      new_event: {
        description: "New <span class='provider'>event</span> " \
          "in <span class='provider'>SampleApp</span>",
        input_fields: lambda do |_object_definitions|
          {
            name: "event",
            control_type: "select",
            pick_list: "event_type",
            optional: false
          }
        end,
  
        webhook_subscribe: lambda do |webhook_url, _connection, input|
          event_type = case input["event_type"]
                       when "invitee.created"
                         ["invitee.created"]
                       when "invitee.canceled"
                         ["invitee.canceled"]
                       else
                         ["invitee.created", "invitee.canceled"]
                       end
  
          post("/api/v1/hooks")
            .payload(url: webhook_url, events: event_type)
        end,
  
        webhook_notification: lambda do |_input, payload|
          payload
        end,
  
        webhook_unsubscribe: lambda do |webhook|
          delete("/api/v1/hooks/#{webhook['id']}")
        end,
  
        dedup: lambda do |event|
          event["event"] + "@" + event["payload"]["event"]["uuid"]
        end,
  
        output_fields: lambda do |object_definitions|
          object_definitions["event"]
        end,
  
        sample_output: lambda do |_connection, _input|
          {
            "event": "invitee.created",
            "time": "2018-03-14T19:16:01Z",
            "payload": {
              "event_type": {
                "uuid": "CCCCCCCCCCCCCCCC",
                "kind": "One-on-One",
                "slug": "event_type_name",
                "name": "Event Type Name",
                "duration": 15,
                "owner": {
                  "type": "users",
                  "uuid": "DDDDDDDDDDDDDDDD"
                }
              },
              "event": {
                "uuid": "BBBBBBBBBBBBBBBB",
                "assigned_to": [
                  "Jane Sample Data"
                ],
                "extended_assigned_to": [
                  {
                    "name": "Jane Sample Data",
                    "email": "user@example.com",
                    "primary": false
                  }
                ],
                "start_time": "2018-03-14T12:00:00Z",
                "start_time_pretty": "12:00pm - Wednesday, March 14, 2018",
                "invitee_start_time": "2018-03-14T12:00:00Z",
                "invitee_start_time_pretty": "12:00pm - Wednesday, " \
                "March 14, 2018",
                "end_time": "2018-03-14T12:15:00Z",
                "end_time_pretty": "12:15pm - Wednesday, March 14, 2018",
                "invitee_end_time": "2018-03-14T12:15:00Z",
                "invitee_end_time_pretty": "12:15pm - Wednesday, March 14, 2018",
                "created_at": "2018-03-14T00:00:00Z",
                "location": "The Coffee Shop",
                "canceled": false,
                "canceler_name": "",
                "cancel_reason": "",
                "canceled_at": ""
              },
              "invitee": {
                "uuid": "AAAAAAAAAAAAAAAA",
                "first_name": "Joe",
                "last_name": "Sample Data",
                "name": "Joe Sample Data",
                "email": "not.a.real.email@example.com",
                "timezone": "UTC",
                "created_at": "2018-03-14T00:00:00Z",
                "is_reschedule": false,
                "payments": [
                  {
                    "id": "ch_AAAAAAAAAAAAAAAAAAAAAAAA",
                    "provider": "stripe",
                    "amount": 1234.56,
                    "currency": "USD",
                    "terms": "sample terms of payment (up to 1,024 characters)",
                    "successful": true
                  }
                ],
                "canceled": false,
                "canceler_name": "",
                "cancel_reason": "",
                "canceled_at": ""
              },
              "questions_and_answers": [
                {
                  "question": "Skype ID",
                  "answer": "fake_skype_id"
                },
                {
                  "question": "Facebook ID",
                  "answer": "fake_facebook_id"
                },
                {
                  "question": "Twitter ID",
                  "answer": "fake_twitter_id"
                },
                {
                  "question": "Google ID",
                  "answer": "fake_google_id"
                }
              ],
              "questions_and_responses": {
                "1_question": "Skype ID",
                "1_response": "fake_skype_id",
                "2_question": "Facebook ID",
                "2_response": "fake_facebook_id",
                "3_question": "Twitter ID",
                "3_response": "fake_twitter_id",
                "4_question": "Google ID",
                "4_response": "fake_google_id"
              },
              "tracking": {
                "utm_campaign": "",
                "utm_source": "",
                "utm_medium": "",
                "utm_content": "",
                "utm_term": "",
                "salesforce_uuid": ""
              },
              "old_event": "",
              "old_invitee": "",
              "new_event": "",
              "new_invitee": ""
            }
          }
        end
      }
  
      #  Polling trigger example. Checks for new records every 5 minutes
      #  see more at https://docs.workato.com/developing-connectors/sdk/guides/building-triggers/poll.html
      #  updated_ticket: {
      #    input_fields: lambda do
      #      [
      #        {
      #          name: 'since',
      #          type: :timestamp,
      #          optional: false
      #        }
      #      ]
      #    end,
  
      #    poll: lambda do |connection, input, last_updated_since|
      #      page_size = 100
      #      updated_since = (last_updated_since || input['since']).to_time.utc.iso8601
  
      #      tickets = get("https://#{connection['helpdesk']}.freshdesk.com/api/v2/tickets.json").
      #                params(order_by: 'updated_at',
      #                       order_type: 'asc',
      #                       per_page: page_size,
      #                       updated_since: updated_since)
  
      #      next_updated_since = tickets.last['updated_at'] unless tickets.blank?
  
      #      {
      #        events: tickets,
      #        next_poll: next_updated_since,
      #        can_poll_more: tickets.length >= page_size
      #      }
      #    end,
  
      #    dedup: lambda do |event|
      #      event['id']
      #    end,
  
      #    output_fields: lambda do |object_definitions|
      #      object_definitions['ticket']
      #    end
      #  },
  
    },
  
    pick_lists: {
      # Picklists can be referenced by inputs fields or object_definitions
      # possible arguements - connection
      # see more at https://docs.workato.com/developing-connectors/sdk/sdk-reference/picklists.html
      event_type: lambda do
        [
          # Display name, value
          %W[Event\ Created invitee.created],
          %W[Event\ Canceled invitee.canceled],
          %W[All\ Events all]
        ]
      end
  
      # folder: lambda do |connection|
      #   get("https://www.wrike.com/api/v3/folders")["data"].
      #     map { |folder| [folder["title"], folder["id"]] }
      # end
    },
  
    # Reusable methods can be called from object_definitions, picklists or actions
    # See more at https://docs.workato.com/developing-connectors/sdk/sdk-reference/methods.html
    methods: {
      # This method is for Custom action
      make_schema_builder_fields_sticky: lambda do |schema|
        schema.map do |field|
          if field['properties'].present?
            field['properties'] = call('make_schema_builder_fields_sticky',
                                       field['properties'])
          end
          field['sticky'] = true
  
          field
        end
      end,
  
      # Formats input/output schema to replace any special characters in name,
      # without changing other attributes (method required for custom action)
      format_schema: lambda do |input|
        input&.map do |field|
          if (props = field[:properties])
            field[:properties] = call('format_schema', props)
          elsif (props = field['properties'])
            field['properties'] = call('format_schema', props)
          end
          if (name = field[:name])
            field[:label] = field[:label].presence || name.labelize
            field[:name] = name
                           .gsub(/\W/) { |spl_chr| "__#{spl_chr.encode_hex}__" }
          elsif (name = field['name'])
            field['label'] = field['label'].presence || name.labelize
            field['name'] = name
                            .gsub(/\W/) { |spl_chr| "__#{spl_chr.encode_hex}__" }
          end
  
          field
        end
      end,
  
      # Formats payload to inject any special characters that previously removed
      format_payload: lambda do |payload|
        if payload.is_a?(Array)
          payload.map do |array_value|
            call('format_payload', array_value)
          end
        elsif payload.is_a?(Hash)
          payload.each_with_object({}) do |(key, value), hash|
            key = key.gsub(/__\w+__/) do |string|
              string.gsub(/__/, '').decode_hex.as_utf8
            end
            if value.is_a?(Array) || value.is_a?(Hash)
              value = call('format_payload', value)
            end
            hash[key] = value
          end
        end
      end,
  
      # Formats response to replace any special characters with valid strings
      # (method required for custom action)
      format_response: lambda do |response|
        response = response&.compact unless response.is_a?(String) || response
        if response.is_a?(Array)
          response.map do |array_value|
            call('format_response', array_value)
          end
        elsif response.is_a?(Hash)
          response.each_with_object({}) do |(key, value), hash|
            key = key.gsub(/\W/) { |spl_chr| "__#{spl_chr.encode_hex}__" }
            if value.is_a?(Array) || value.is_a?(Hash)
              value = call('format_response', value)
            end
            hash[key] = value
          end
        else
          response
        end
      end
    }
  }
  